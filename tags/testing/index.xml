<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Alberto Cámara</title>
    <link>https://ber2.github.io/tags/testing/</link>
    <description>Recent content in Testing on Alberto Cámara</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jun 2025 08:00:06 +0200</lastBuildDate>
    <atom:link href="https://ber2.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Github Actions setup for Python projects in 2025</title>
      <link>https://ber2.github.io/posts/2025_github_actions_python/</link>
      <pubDate>Sat, 14 Jun 2025 08:00:06 +0200</pubDate>
      <guid>https://ber2.github.io/posts/2025_github_actions_python/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;p&gt;In this post I discuss my current choice of tools for setting up a Python project and running continuous integration via &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In line with recent fashion, my choices revolve significantly around some of the recently introduced tools by &lt;a href=&#34;https://astral.sh&#34;&gt;Astral&lt;/a&gt;. Their common &lt;em&gt;leitmotiv&lt;/em&gt; is that, although designed for the Python ecosystem, the tools themselves are written in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;. This, along with some very nice design decisions (see &lt;a href=&#34;https://www.youtube.com/watch?v=gSKTfG1GXYQ&#34;&gt;this talk&lt;/a&gt; about &lt;code&gt;uv&lt;/code&gt;, for example), makes them very reliable and fast.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing asyncio code on Python 3.9</title>
      <link>https://ber2.github.io/posts/asyncio-testing/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://ber2.github.io/posts/asyncio-testing/</guid>
      <description>&lt;p&gt;A few notes on how to unit test Python asyncio code.&#xA;Accompanying code available &lt;a href=&#34;https://github.com/ber2/basic-asyncio-example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pythons-asyncio-library&#34;&gt;Python&amp;rsquo;s asyncio library&lt;/h2&gt;&#xA;&lt;p&gt;Starting from Python 3.7, and having received a lot of attention in subsequent releases, the&#xA;&lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;asyncio&lt;/a&gt; library provides a basis for comfortably&#xA;writing concurrent code.&lt;/p&gt;&#xA;&lt;p&gt;This is a good idea when you are given a task which is not CPU intensive, such that your program&#xA;will spend most of the time idly waiting for responses from other components. I/O bound tasks are&#xA;the typical example: when extracting data from a REST API, you are bound to spend most time sitting&#xA;on an idle CPU while waiting for HTTP responses.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
