<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Alberto Cámara</title>
    <link>https://ber2.github.io/tags/python/</link>
    <description>Recent content in Python on Alberto Cámara</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ber2.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BCN PyDay 2020 Counting votes with Dask</title>
      <link>https://ber2.github.io/posts/pyday-talk/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://ber2.github.io/posts/pyday-talk/</guid>
      <description>&lt;p&gt;I have given a talk at the &lt;a href=&#34;https://pybcn.org/events/pyday_bcn/pyday_bcn_2020/&#34;&gt;Barcelona PyDay 2020&lt;/a&gt;, which is taking place as an online event on&#xA;December 12th, 2020.&lt;/p&gt;&#xA;&lt;p&gt;The title of the talk is &lt;strong&gt;Counting votes: analyzing a large dataset with Dask&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The purpose of the&#xA;talk is to exhibit a use case in which &lt;a href=&#34;https://dask.org/&#34;&gt;Dask&lt;/a&gt; excels, in my opinion: working with&#xA;datasets which do not fit into single machine memory but still are reasonably small not to require&#xA;going to a cluster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing asyncio code on Python 3.9</title>
      <link>https://ber2.github.io/posts/asyncio-testing/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://ber2.github.io/posts/asyncio-testing/</guid>
      <description>&lt;p&gt;A few notes on how to unit test Python asyncio code.&#xA;Accompanying code available &lt;a href=&#34;https://github.com/ber2/basic-asyncio-example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pythons-asyncio-library&#34;&gt;Python&amp;rsquo;s asyncio library&lt;/h2&gt;&#xA;&lt;p&gt;Starting from Python 3.7, and having received a lot of attention in subsequent releases, the&#xA;&lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;asyncio&lt;/a&gt; library provides a basis for comfortably&#xA;writing concurrent code.&lt;/p&gt;&#xA;&lt;p&gt;This is a good idea when you are given a task which is not CPU intensive, such that your program&#xA;will spend most of the time idly waiting for responses from other components. I/O bound tasks are&#xA;the typical example: when extracting data from a REST API, you are bound to spend most time sitting&#xA;on an idle CPU while waiting for HTTP responses.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hourly Register</title>
      <link>https://ber2.github.io/posts/hourly-register/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://ber2.github.io/posts/hourly-register/</guid>
      <description>&lt;h2 id=&#34;everybody-fill-up-forms&#34;&gt;Everybody fill up forms!&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;strong&gt;hourly register form&lt;/strong&gt; is a document which will be familiar to paid company workers in Spain.&lt;/p&gt;&#xA;&lt;p&gt;Introduced by law a couple of years ago, it makes everyone register at which time they start and&#xA;stop working every day. A report is filled at the end of each month, signed and archived, and never&#xA;to be seen again unless the company suffers an inspection or a legal problem arises.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On data classes in Python 3.8 and 3.9</title>
      <link>https://ber2.github.io/posts/dataclasses/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://ber2.github.io/posts/dataclasses/</guid>
      <description>&lt;p&gt;In this post I gather a few comments and give some examples on the usage of &lt;strong&gt;data classes in Python&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;data-classes&#34;&gt;Data classes&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/dataclasses.html&#34;&gt;Data classes&lt;/a&gt; were introduced in Python 3.7.&#xA;We could summarize them as a convenient way to represent data, since classes decorated with&#xA;&lt;code&gt;@dataclass&lt;/code&gt; will supply methods such as &lt;code&gt;__init__()&lt;/code&gt; or &lt;code&gt;__repr__()&lt;/code&gt; without having to define them.&lt;/p&gt;&#xA;&lt;p&gt;Parameter types are indicated using type annotations, so a data class declaration will look like&#xA;this:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
